
<section xml:id="ch1-exs">
<title>Exercises</title> 
  <exercises>
    <title>Java Programming Design and Development</title> 
    <exercisegroup>
      <title>Fill In the Blanks</title>
      <introduction>
	<p>
          Fill in the blanks in each of the following statements.
	</p>
      </introduction>
      <!-- Problem 1a -->
      <exercise label="jpdd_fill_in_blank_class_def">
	<title>Java class definition</title>
	<statement>
          <p>
            A Java class definition contains an object's <var width="20"/> and <var width="10"/>. 
          </p>
	</statement>
	<setup>
          <var>
            <condition case="insensitive" string="(instance variables)|(fields)">
              <feedback>
		<p>Correct, Instance Variables or Fields are part of an object's class definition.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="methods">
              <feedback>
		<p>Try Again, Wrong Order, Methods are part of an object's class definition, but this answer is expected in the second blank."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Think about what the two parts of an Object are.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition case="insensitive" string="methods">
              <feedback>
		<p>Correct, Methods are part of an object's class definition."</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="functions">
              <feedback>
		<p>Not descriptive enough, functions do not have to be part of an object. 
		Expecting the word for a function that belongs to a class.</p>
              </feedback>

            </condition>
            <condition case="insensitive" string="(instance variables)|(fields)">
              <feedback>
		<p>Try Again, Wrong Order, Instance Variables or Fields are part of an object's class definition, but this answer is expected in the first blank.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Think about what the two parts of an Object are.</p>
              </feedback>
            </condition>
          </var>
	</setup>
	
      </exercise>
      
      <!-- Problem 1b -->
      <exercise label="jpdd_fill_in_blank_method_def">
	<title>Java method definition</title>
	<statement>
	  <p>
            A method definition contains two parts,
            a <var width="10"/> and a <var width="7"/>.
	  </p>
	</statement>
	<setup>
          <var>
            <condition case="insensitive" string="header|heading">
              <feedback>
		<p>Correct, A header is the first part of a method definition.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="body">
              <feedback>
		<p>Try Again, Wrong Order, a body is part of a method definition, but this answer is expected in the second blank."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Think about what the two parts of an method are.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition case="insensitive" string="body">
              <feedback>
		<p>Correct, a body is part of a method definition."</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="header|heading">
              <feedback>
		<p>Try Again, Wrong Order, A header is the first part of a method definition, but this answer is expected in the first blank.</p>
              </feedback>
            </condition>
            
            <condition string=".*">
              <feedback>
		<p>Try again. Think about what the two parts of an method are.</p>
              </feedback>
            </condition>
          </var>
	</setup>
      </exercise>
    </exercisegroup>
    
    <!-- Problem 2 -->
    <exercise label="jpdd_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Explain the difference between each of the following pairs of concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>single-line</em> comment</premise>
          <response>begins with <c>//</c> and is placed at the end of or immediately before a line of code to clarify the line </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>multiline</em> comment</premise>
          <response>provides clarification as well as important
	  information about the program. It may extend over several
	  lines and it begins with <c>/*</c> and ends with <c>*/</c></response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>compiling</em> a program</premise>
          <response>translates it from Java language statements into Java bytecode</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>running</em> a program</premise>
          <response>uses a Java Virtual Machine (JVM) to interpret and execute the bytecode</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>source code</em> file</premise>
          <response>a program file written in Java language statements</response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>bytecode</em> file</premise>
          <response>a file that can be understood by the JVM</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>syntax</em></premise>
          <response>the set of rules that determine whether a particular
	  statement is correctly formulated</response>
	</match>
	<match>
	  <order>8</order>
          <premise><em>semantics</em></premise>
          <response>the meaning of a program statement â€“ that is, what action the statement takes</response>
	</match>
	<match>
	  <order>9</order>
          <premise><em>Syntax error</em></premise>
          <response>an incorrectly formulated statement that cannot be read by the Java compiler</response>
	</match>
	<match>
	  <order>10</order>
          <premise><em>semantic error</em></premise>
          <response>an error in the logic of the program that will
	  cause it to run incorrectly, but will not be detected by the compiler. The program may still run, but will not produce the desired results</response>
	</match>
	<match>
	  <order>11</order>
          <premise><em>data</em></premise>
          <response>ways of representing information needed to run the
	  program</response>
	</match>
	<match>
	  <order>12</order>
          <premise><em>methods</em></premise>
          <response>sections of code that manipulate information and perform particular actions</response>
	</match>
	<match>
	  <order>13</order>
          <premise><em>variable</em></premise>
          <response>a memory location in which a datum, such as an
	  integer or a character, may be stored</response>
	</match>
	<match>
	  <order>14</order>
          <premise><em>algorithm</em></premise>
          <response>a step-by-step description of the solution to a
	  problem</response>
	</match>
	<match>
	  <order>15</order>
          <premise><em>pseudocode</em></premise>
          <response>a hybrid between English and Java code that does
	  not pay attention to the Java syntax. It makes translating a program into Java code easier</response>
	  </match><match>
	  <order>16</order>
          <premise><em>Java code</em></premise>
          <response>Text that follows Java syntax and can be compiled
	  by the JVM if written correctly</response>
	</match>
	<match>
	  <order>17</order>
          <premise><em>method definition</em></premise>
          <response>the task a particular method is written to
	  perform</response>
	</match>
	<match>
	  <order>18</order>
          <premise><em>method invocation</em></premise>
          <response>the calling of a particular method to perform its
	  designated task</response>
	</match>
	
	.
	
      </matches>
    </exercise>

    <exercisegroup>
      <title>Syntax vs. Semantics</title>
      <introduction>
	<p>
          For each of the following,
	  identify it as either a syntax error or a semantic error, and
	  identify the best explanation.
	</p>
      </introduction>

      <!-- Problem 3a -->
      <exercise label="jpdd_syntax_vs_semantics_mc1">
	<title>Class Header</title>
	<statement>
          <p>
            Write a class header as <c>public Class MyClass</c>.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, <c>MyClass</c> isn't descriptive enough.</statement></choice>
	  <choice correct="yes"><statement>syntax error, <c>Class</c> is not a keyword. the
	  keyword <c>class</c> starts with a lowercase character</statement></choice>
	  <choice><statement> semantic error, the class isn't always mine.</statement> </choice>
	  <choice><statement> semantic error, if the class is mine, then it should be
	  private. </statement></choice>
	</choices>
      </exercise>
      <!-- Problem 3b -->
      <exercise label="jpdd_syntax_vs_semantics_mc2">
	<title>Method Header</title>
	<statement>
          <p>
            Define the <c>init()</c> header as <c>public vid init()</c>.
          </p>
	</statement>
	<choices>
	  <choice correct = "yes"><statement>syntax error, <c>vid</c>is not a keyword understood by
	  the compiler</statement> </choice>
	  <choice><statement>syntax error, constructors don't have a return type.</statement> </choice>
	  <choice><statement> semantic error, returning a video instead of nothing
	  doesn't make sense. </statement> </choice>
	  <choice><statement> semantic error, public methods can be called by any class. </statement> </choice>
	</choices>
      </exercise>
      <!-- Problem 3c -->
      <exercise label="jpdd_syntax_vs_semantics_mc5">
	<title>Console output</title>
	<statement>
          <p>
            Print a string of five asterisks by <c>System.out.println("***");</c>.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, the statement doesn't return anything</statement> </choice>
	  <choice><statement>syntax error, semicolons end every statement</statement> </choice>
	  <choice correct = "yes"><statement> semantic error, prints three asterisks
	  instead of five. </statement> </choice>
	  <choice><statement> semantic error, prints a newline after the string. </statement> </choice>
	</choices>
      </exercise>
      <!-- Problem 3d -->
      <exercise label="jpdd_syntax_vs_semantics_mc3">
	<title>Missing semicolon</title>
	<statement>
          <p>
            Forget the semicolon at the end of a <c>println()</c> statement.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, the statement doesn't return anything</statement> </choice>
	  <choice correct = "yes"><statement>syntax error, semicolons are needed to  end every statement</statement> </choice>
	  <choice><statement> semantic error, we don't know what the <c>println()</c> prints. </statement> </choice>
	  <choice><statement> semantic error, prints a newline after the string. </statement> </choice>
	</choices>
      </exercise>
      <!-- Problem 3e -->
      <exercise label="jpdd_syntax_vs_semantics_mc4">
	<title>Arithmetic</title>

	<statement>
          <p>
            Variables <c>n</c> and <c>m</c> have been initialized as numeric data
	    types. Calculate the sum of the two numbers as <c>n  -  m</c>.
          </p>
	</statement>
	<choices>
	  <choice ><statement>syntax error, expressions can be part of larger statements</statement> </choice>
	  <choice><statement>syntax error, semicolons are needed to end every statement</statement> </choice>
	  <choice correct = "yes"><statement> semantic error, It is correct syntax but the difference
	  of <c>n</c> and <c>m</c> will be calculated instead of the sum. </statement> </choice>
	  <choice><statement> semantic error, n and m could be any number that can be
	  represented by the data type</statement> </choice>
	</choices>
      </exercise>
    </exercisegroup>

     
     <!-- Problem 4 -->
     <exercise label="jpdd_order_compile">
       	<title>Java compile and run</title>
      <statement>
	<p>
	Suppose you have a Java program stored in a file named <c>Test.java</c>. Describe the 
	  compilation and execution process for this program,
	  naming any other files that would be created.
	</p>
      </statement>
      <blocks indentation="hide">
	<block>
	  <p> The java compiler attempts to translate Test.java into a Java bytecode.</p> 
	</block>
	<block>
	  <p>If there are no errors, the java compiler will create a file named Test.class that holds the bytecode.</p>
	</block>
	<block>
	  <p>If there are errors, the java compiler will display errors to the console and will not create a bytecode file.</p>
	</block>
	<block>
	 <p>  If there are errors on the console, the programmer will attempt to update the Test.java file to fix the syntax, then go to the start of the process.</p>
	</block>
	<block>
	  <p>If there is a Text.class file, then it will then be loaded into the computerâ€™s main memory and interpreted and executed by the Java Virtual Machine.</p>
	</block>
      </blocks>
    </exercise>

    
    <exercisegroup>
      	<title>Algorithm Tracing</title>

      <introduction>
	<p>
	  Consider the following algorithm:
	  </p>
	  <p>
<cd>
0. Print N.
1. If N equals 1, stop.
2. If N is even, divide it by 2,
3. Otherwise, triple it and add 1.
4. Go to step 0.
</cd>
	</p>
      </introduction>
      <!-- Problem 5a -->
      <exercise  label="jpdd_algorithm_tracing_1">
	<title>7 sequence</title>

	<statement>
	  
	  <p>
	    Suppose <em>N</em> is 7.
	    Select the sequence of numbers would be output by the above pseudocode algorithm.
	  </p>
	</statement>
	<choices>
	  <choice><statement>7,3,1</statement> </choice>
	  <choice correct="yes"><statement>7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1</statement> </choice>
	  <choice><statement> 7,20,10,5,14,7,... </statement> </choice>
	  <choice><statement> 7,16,8,4,2,1</statement> </choice>
	</choices>
      </exercise>
      <!-- Problem 5b -->
      <exercise label="jpdd_algorithm_tracing_2">
		<title>6 sequence</title>

	<statement>
	  
	  <p>
	    Suppose <em>N</em> is 6.
	    Select the sequence of numbers would be output by the above pseudocode algorithm.
	  </p>
	</statement>
	<choices>
	  <choice><statement>6,3,1</statement> </choice>
	  <choice correct="yes"><statement>6,3,10,5,16,8,4,2,1</statement> </choice>
	  <choice><statement> 6,19,9,4,13,6,... </statement> </choice>
	  <choice><statement> 6,3,8,4,2,1</statement> </choice>
	</choices>
      </exercise>
    </exercisegroup>
    
      <!-- Problem 6 -->
      <exercise label="jpdd_algorithm_tracing_3">
	<title>Loop algorithm</title>

      <statement>
	<p>
	  Suppose <em>N</em> is 5 and <em>M</em> is 3.
	  What value would be reported by the following pseudocode algorithm? <var  width="5" />
	  In general, what quantity does this algorithm calculate? <var  width="10"/>
	</p>
	
	<cd>
	  0. Write 0 on a piece of paper.
	  1. If M equals 0, report what's on the paper and stop.
	  2. Add N to the quantity written on the paper.
	  3. Subtract 1 from M.
	  4. Go to step 1.
	</cd>
      </statement>
      <setup>
	<var>
          <condition string="15">
            <feedback>
              <p>Correct, the paper has 0 then 5 and M becomes 2, then 10 and M becomes 1, then 15 and M becomes 0, and then the program stops after reporting 15."</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again. Make sure you are updating the value on the paper and the value of M at the appropriate times.</p>
            </feedback>
          </condition>
	</var>
	<var>
          <condition string="(N *([*x]| times ) *M)|(M *([*x]| times ) *N)">
            <feedback>
              <p>Correct, the pseudocode computes summation of the number N, M times, which is N * M. "</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again. Think about the relationship between N, M and the result.</p>
            </feedback>
          </condition>
	</var>
      </setup>
      

    </exercise>
    <!-- Problem 7 -->
    <exercise label="jpdd_puzzle_problem_1">
      	<title>Two ropes burning</title>

      <statement>
	<p><term>Puzzle Problem:</term>  You are given two different length ropes that have the characteristic 
	that they both take exactly one hour to burn.
	However, neither rope burns at a constant rate.
	Some sections of the ropes burn very fast;
	other sections burn very slowly.
	All you have to work with is a box of matches and the two ropes.
	Describe an algorithm that uses the ropes and the matches to calculate when exactly 45 minutes have elapsed.
	</p>
      </statement>
      <blocks indentation="hide">
	<block>
	  Light both ends of the first string and one end of
	  the second string at the same time.
	</block>
	<block>
	  When the first string is finished burning, light the unlit end of the second string.
	</block>
	<block>
	  When the second string is finished burning
	  exactly 45 minutes will have passed.
	</block>
	<block correct="no">
	  Light both ends of the first string at the same time.
	</block>
	<block correct="no">
	  Light one end of the second string.
	</block>
	<block correct="no">
	  When the first string is half of it's original length, light both ends of the second string at the same time.
	</block>
      </blocks>
    </exercise>


   <!-- Problem 8 -->
   <exercise label="jpdd_puzzle_problem_2">
     	<title>Polar mobility</title>
     <statement>
      <p><term>Puzzle Problem:</term> A polar bear that lives right at the North Pole can walk due south for one hour,
      due east for one hour,
      and due north for one hour, and end up right back where it started.
      Is it possible to do this anywhere else on earth?
      Explain.
      </p>
     </statement>
           <blocks indentation="hide">
	<block>
	  Yes.
	</block>
	<block>
	  Start an hour north from a latitude that has a circumference
	  that will take one hour to traverse.
	</block>
	<block>
	  Walk an hour south.
	</block>
	<block>
	  Walk due east for an hour, going completely around the
	  circumference, so you'll be at the same place.
	</block>
	<block>
	  Walk an hour north.
	</block>
	<block correct="no">
	  No, the North Pole is the only place where this can be done.
	</block>
      </blocks>

   </exercise>
   <!-- Problem 9 -->
   <exercise label="jpdd_puzzle_problem_3">
     	<title>Tower puzzle</title>

      <statement>
      <p><term>Puzzle Problem:</term>  Lewis Carroll,
      the author of <em>Alice in Wonderland</em>,
      used the following puzzle to entertain his guests: A captive monarch weighing 195 pounds,
      her youngest child weighing 90 pounds,
      and her eldest  weighing 165 pounds,
      were trapped in a very high tower.
      Outside their window was a pulley and rope with a basket fastened on each end.
      They managed to escape by using the baskets and a 75-pound weight they found in the tower.
      How did they do it?
      The problem is that anytime the difference in weight between the two baskets is more than 15 pounds,
      someone might get hurt.
      Describe an algorithm that gets them down safely.
      </p>
      </statement>
          <blocks indentation="hide">
	<block>
	  Lower the weight in the basket. (75/0)
	</block>
	<block>
	  Lower the son in the basket. (90/75)
	</block>
	<block>
	  Lower the weight in the basket again. (75/0)
	</block>
	<block>
	  Put the son with the weight in the basket at the bottom. (0/165) 
	</block>
	<block>
	  Lower the daughter. (165/165)
	</block>
	<block>
	  Lower the weight in the basket a third time. (75/0)
	</block>
	<block>
	  Lower the son in the basket again. (90/75)
	</block>
	<block>
	  Put the daughter with the son in the basket at the bottom. (0/255) 
	</block>
	<block>
	  Lower the queen and weight in the basket. (270/255)
	</block>
	<block>
	  Keep the weight in the basket. (0/75)
	</block>
	<block>
	  Lower the son in the basket a third time. (90/75)
	</block>
	<block>
	  Lower the weight in the basket a fourth time. (75/0)
	</block>
	<block>
	  Put the son with the weight in the basket at the bottom again. (0/165)
	</block>
	<block>
	  Lower the daughter again. (165/165)
	</block>
	<block>
	  Lower the weight in the basket a fifth time. (75/0)
	</block>
	<block>
	  Lower the son in the basket a fourth time. (90/75)
	</block>
	<block>
          Stay clear of the weight falling as everyone is out of the tower!
	</block>
      </blocks>
    </exercise>
    <!-- Problem 10 -->
    <exercise label="jpdd_puzzle_problem_4">
      	<title>River crossing</title>

      <statement>
      <p><term>Puzzle Problem:</term> Here's another Carroll favorite:
      A farmer needs to cross a river with a fox, a goose,
      and a bag of corn.
      There's a rowboat that will hold the farmer and one other passenger.
      The problem is that the fox will eat the goose if they are left alone on the river bank,
      and the goose will eat the corn if they are left alone on the river bank.
      Write an algorithm that describes how they got all across
      without any losses. One last constraint is that the animals
      don't like to stay still; so, prioritize getting the animals to
      the other side before the corn, if possible.
      </p>
      </statement>
      <blocks indentation="hide">
      	<block>
	  Farmer and goose row across.
	</block>
	<block>
	  Farmer rows back. 
	</block>
	<block>
	  Farmer and fox row across.
	</block>
	<block>
	  Farmer and goose row back.
	</block>
	<block>
	 Farmer and corn row across.
	</block>
	<block>
	  Farmer rows back again.
	</block>
	<block>
	  Farmer and goose row across again.
	</block>
	<block correct="no">
	  Farmer and fox row back. 
	</block>
	<block correct="no">
	  Farmer and fox row across again.
	</block>
	<block correct="no">
	  Farmer and corn row back.
	</block>
	<block correct="no">
          Farmer and corn row across again.
	</block>
      </blocks>
    </exercise>
    <!-- Problem 11 -->
    <exercise label="jpdd_puzzle_problem_5">
      	<title>Weight Balancing</title>
      <statement>
      <p><term>Puzzle Problem:</term> Have you heard this one?
      A farmer lent the mechanic next door a 40-pound weight.
      Unfortunately,
      the mechanic dropped the weight and it broke into four pieces. The good news is that,
      according to the mechanic,
      it is still possible to use the four pieces to weigh any quantity between one 
      40 pounds on a balance scale. How much did each of the four
      pieces weigh?
      Enter in order of increasing weight, the value of each weight
      fragment in pounds. 
      </p>
      <p><var width="5"/></p>
      <p><var width="5"/></p>
      <p><var width="5"/></p>
      <p><var width="5"/></p>
      </statement>
      <setup>
          <var>
            <condition case="insensitive" string="1">
              <feedback>
		<p>Correct.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="3">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="9">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="27">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition case="insensitive" string="3">
              <feedback>
		<p>Correct.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="1">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="9">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="27">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition case="insensitive" string="9">
              <feedback>
		<p>Correct.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="3">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="1">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="27">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition case="insensitive" string="27">
              <feedback>
		<p>Correct.</p>
              </feedback>
            </condition>
            <condition case="insensitive" string="3">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="9">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="1">
              <feedback>
		<p>Try Again, Wrong Order."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
      </setup>
      <hint>You can weigh a 4-pound object on a balance by putting a 5-pound 
      weight on one side and a 1-pound weight on the other. </hint>
      <hint>Try to determine how you would weigh the first 4
      consecutive weights with the 2 smallest fragments. How much
      would each of the 2 smallest fragments weigh?</hint>
      
    </exercise>
    <!-- Problem 12 -->
    <exercise label="jpdd_algorithm_calculate">
      	<title>Calculator Algorithm</title>
      <statement>
      <p>
	Suppose your younger sibling asks you to show them how to use a 
	pocket calculator so that they can calculate their homework average in their science course.
	Describe an algorithm that they can use to find the average of 10 homework grades.
      </p>
      </statement>
       <blocks indentation="hide">
      	<block>
	  Input the grade for the next homework assignment.
	</block>
	<block>
	  Type the plus key. 
	</block>
	<block>
	  If there are more grades to average, go to the beginning.
	</block>
	<block>
	  Type the equal key.
	</block>
	<block>
	 Type the division key.
	</block>
	<block>
	  Input 10.
	</block>
	<block>
	  Type the equal key a second time.
	</block>
	<block>
	  Read the value on the screen, That's the average.
	</block>
	<block correct="no">
	  Type the minus key. 
	</block>
	<block correct="no">
	  Type the times key.
	</block>
	<block correct="no">
	  Type the clear key.
	</block>
      </blocks>
    </exercise>
    <!-- Problem 13 -->
    <exercise label="jpdd_caesar_cipher">
      	<title>Shift Cipher (a la Julius Caesar)</title>
      <statement>
      <p>
	A Caesar cipher is a secret code in which each letter of the alphabet is shifted by
	<em>N</em> letters to the right,
	with the letters at the end of the alphabet wrapping around to the beginning.
	For example,
	if <em>N</em> is 1, when we shift each letter to the right,
	the word <em>daze</em> would be written as <em>ebaf</em>.
	Note that the <em>z</em> has wrapped around to the beginning of the alphabet.
	Select each of the below algorithms that can be used to create a Caesar encoded message with a shift of 5.
      </p>
      </statement>
      <choices multiple-correct="yes">
	<choice correct="yes">
	  <statement> Shift each letter of the message to the right by
	  5.</statement><feedback>Yes, since letters are represented
	  numerically, shifting to the right is equivalent to adding 5
	  to the value and subtracting 26 if the number is above 26.</feedback>
	</choice>
	<choice correct="yes">
	  <statement>
	    <cd>
	      Repeat 5 times,
	          Shift each letter of the message to the right by 1
	    </cd>
	</statement><feedback>Yes, this can be done with repetition or
      a loop.</feedback></choice>
	  <choice correct="yes"><statement>Shift each letter of the
	  message to the left by 21.</statement><feedback>Yes,
	  shifting to the left by 21 (subtract 21 and add 26 if the
	  result is below 1) is the same as shifting to the
	  right by 5</feedback> </choice>
	  <choice><statement> Shift each letter of the message to the
	  right by 7. </statement><feedback>No, that will shift too mucn.</feedback></choice>
	  <choice correct="yes">
	  <statement>
	    <cd>
	      Repeat 3 times,
	          Shift each letter of the message to the left by 7
	    </cd>
	</statement><feedback>Yes, this combines a loop, shifting to
	  the left, and the fact that 21 can be factored into 3 and 7.</feedback></choice>
	</choices>
    </exercise>
    <exercisegroup label="jpdd_caesar_decipher">
      <title>Shift Decipher</title>
<introduction>
      <p>
	Suppose you received the message,
	<q>sxccohv duh ixq,</q>
	which you know to be a Caesar cipher.
      </p>
</introduction>
    <!-- Problem 14a -->
      <exercise label="jpdd_caesar_decipher_part1">
	<title>Decipher the Text</title>
	<statement>
	<p>
	Figure out what it says, type it in here: <var width="20"/>
	</p>
      </statement>
      <setup>
          <var>
            <condition case="insensitive" string="puzzles are fun">
              <feedback>
		<p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
      </setup>
      </exercise>
    <!-- Problem 14b -->
      <exercise label="jpdd_caesar_decipher_part2">
	<title>Determine the Decipher algorithm</title>
	<statement>
      <p>Then select which of the below algorithms will always find what the 
	message said regardless of the size of the shift that was used.
      </p>
	</statement>
      <choices multiple-correct="yes">
	<choice>
	  <statement> <cd>Shift each letter of the message to the right by
	  3.</cd></statement><feedback>Try again, this will only work if
	  the encoding is a left shift of 3 or a right shift of 23.</feedback>
	</choice>
	<choice>
	  <statement> <cd>Shift each letter of the message to the left by
	  3.</cd></statement><feedback>Try again, this will only work if
	  the encoding is a right shift of 3 or a left shift of 23.</feedback>
	</choice>
	<choice correct="yes">
	  <statement>
	    <cd>
	      Repeat until the message has real words,
	          Shift each letter of the message to the left by 1
	    </cd>
	</statement><feedback>Yes, this is a brute force solution that
	stops as soon as it finds a reasonable decoding.</feedback></choice>
	<choice correct="yes">
	  <statement>
	    <cd>
1. Select the smallest encoded word
2.    let the shift amount be 0
3.    Shift each letter of the message to the left by 1
4.    increment the shift amount
5.    if the smallest word is not a real word, goto 3
6.    Shift the encoded phrase to the left by the shift amount
7.    if the encoded phrase isn't only real words, goto 3
	      
	    </cd>
	</statement><feedback>Yes, this is a brute force solution,
	with an optimization to search the smallest word as a first guess, then
	stops as soon as it finds a reasonable decoding.</feedback></choice>
	</choices>
      </exercise>
    </exercisegroup>
    <!-- Problem 15 -->
    <exercise label="jpdd_average">
      	<title>Running average</title>
      <statement>
      <p>
	Suppose you're talking to your younger sibling on the phone and they want you to calculate their homework average.
	All you have to work with is a piece of chalk and a very small chalkboard<mdash/>big enough to write one four-digit number.
	What's more,
	although your younger sibling knows how to read numbers,
	they don't know how to count very well so they can't tell you how many grades there are.
	All they can do is read the numbers to you.
	Describe an algorithm that will calculate the correct average under these conditions.
      </p>
      </statement>
      <blocks indentation="hide">
      	<block>
	  Divide the chalkboard into two boxes.
	</block>
	<block>
	  Write a 0 in each box. 
	</block>
	<block>
	  Look at chalkboard. (Loop start)
	</block>
	<block>
	  Get a grade from your sibling. 
	</block>
	<block>
	 Add it to the number in the first box.
	</block>
	<block>
	  Add 1 to the number in the second box.
	</block>
	<block>
	  If there are more grades, go to the "Look at chalkboard" step
	</block>
	<block>
	  Divide the number in the first box by the number in the
	  second box.
	</block>
	<block>
	  Tell that number to your sibling.
	</block>
	<block correct="no">
	  Multiply it by the number in the first box. 
	</block>
	<block correct="no">
	  Subtract the number in the second box from the number in the
	  first box.
	</block>
      </blocks>
    </exercise>
    
    
    <!-- Problem 17 -->
    <exercise label="jpdd_fill_in_blank_method_header">
      	<title>Method header</title>
	<statement>
          <p>
           Write a <em>header</em> for a public method named <c>getName</c>. <line/>
	   <var width="40"/> 
          </p>
	</statement>
	<setup>
          <var>
            <condition string="public +String +getName\( *\)">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="public.+String.+getName\( *\)">
              <feedback>
		<p>Try again. You have some text in between parts of your header	 that doesn't belong.</p>
              </feedback>
            </condition>
	    <condition string=".+public +String +getName\( *\).+">
              <feedback>
		<p>Try again. You have some text either before or after the header that doesn't belong.</p>
              </feedback>
            </condition>
	    <condition string=".+public +String +getName\(.+\).+">
              <feedback>
		<p>Try again. You have an argument when there shouldn't be, and you may have some text either before or after the header that doesn't belong.</p>
              </feedback>
            </condition>
	    <condition string=" *public +String +getName\(.+\) *">
              <feedback>
		<p>Try again. You have an argument when there shouldn't be.</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string=" *public +String +getName\( *\) *">
              <feedback>
		<p>Try again, case of every character matters.</p>
              </feedback>
            </condition>
	    <condition string=" *(private |protected )? *String +getName\( *\) *">
              <feedback>
		<p>Try again, the method needs to be public.</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string=" *(private |protected )? *String +getName\( *\) *">
              <feedback>
		<p>Try again, the method needs to be public, and the case of every character matters</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Pay careful attention to what the question is asking.</p>
              </feedback>
            </condition>
          </var>
          
	</setup>
	
      </exercise>
          <!-- Problem 18 -->

    <exercise label="jpdd_rectangle_design">
      	<title>Rectangle class</title>

      <statement>
	<p>
	  Design and implement a class to represent a geometric rectangle with a given length and width,
	  such that it is capable of calculating the area and the
	  perimeter of the rectangle. A main method for the class is
	  below that should work once your class is fully
	  implemented. (Note the tests will only work if you make all
	  of your variables and return types as <c>double</c>.
	</p>
      </statement>
      <program label="jpdd_code_rectangle_class_task" interactive="activecode" language="java">
	<input>

	  public class Rectangle {

	     // TODO: implement fields and methods for Rectangle class

	     /* uncomment this multiline comment once you have finished
	     // defining the class
	     // this will run the class 
	     public static void main(String[] args) {
             Rectangle r = new Rectangle(5,15);

	     System.out.println("The perimiter of the rectangle is " + 
	                        r.getPerimeter());
	     System.out.println("The area of the rectangle is " + r.getArea());

	     
	     }
	     */ // end of multiline comment - uncomment when ready

	  } 

        </input>
	<tests>
          <![CDATA[
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.reflect.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests() {
	super("Rectangle");
    }


    private Object getTestInstance(Object[] defaultTestValues) {
        String errorMessage = "";
        try {
	    Class<?> c = Class.forName("Rectangle");
            Constructor[] ctors = c.getDeclaredConstructors();
            Constructor ctor = ctors[0];

	    return ctor.newInstance(defaultTestValues);

        } catch (Exception e) {
            errorMessage = "Couldn't call constructor";
        }

        return null;
    }
    
    @Test
    public void test1()
    {
	String target = "2 Private";
	String actual = testPrivateInstanceVariables();
	expect(target,actual,"exactly 2 private fields");
	
    }
    

   @Test
    public void testArea1()
    {
    double length = 5.0;
    double width = 12.0;
    double expectedPerimeter = length*2 + width *2;
    double targetArea = length * width;
	try {
	    Object[] testValues = {length, width};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getArea");
	    expect(targetArea,(Double)m.invoke(t),
		   "constructor and getArea work for " + length + ","
		   + width);
	} catch(Exception e) {
	    expect(String.valueOf(targetArea),"exception",
		   "constructor and/or getArea don't work");
	}
	}
	
    @Test
    public void test2()
    {
    double length = 5.0;
    double width = 12.0;
    double targetPerimeter = length*2 + width *2;
    double expectedArea = length * width;
	try {
	    Object[] testValues = {length, width};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getPerimeter");
	    expect(targetPerimeter,(Double)m.invoke(t),
		   "constructor and getPerimeter work for " +  length + ","
		   + width);
	} catch(Exception e) {
	    expect(String.valueOf(targetPerimeter),"exception",
		   "constructor and/or getPerimeter don't work");
	}
	}

@Test
    public void testArea2()
    {
    double length = 50;
    double width =  2;
    double expectedPerimeter = length*2 + width *2;
    double targetArea = length * width;
	try {
	    Object[] testValues = {length, width};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getArea");
	    expect(targetArea,(Double)m.invoke(t),
		   "constructor and getArea work for " + length + ","
		   + width);
	} catch(Exception e) {
	    expect(String.valueOf(targetArea),"exception",
		   "constructor and/or getArea don't work");
	}
	}
	
    @Test
    public void testPerimeter2()
    {
    double length = 50;
    double width = 2;
    double targetPerimeter = length*2 + width *2;
    double expectedArea = length * width;
	try {
	    Object[] testValues = {length, width};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getPerimeter");
	    expect(targetPerimeter,(Double)m.invoke(t),
		   "constructor and getPerimeter work for " + length + ","
		   + width);
	} catch(Exception e) {
	    expect(String.valueOf(targetPerimeter),"exception",
		   "constructor and/or getPerimeter don't work");
	}
    }
    


    
}

          ]]>
	</tests>
	</program>
    </exercise>
    <!-- Problem 19 -->
    <exercise label="jpdd_println_coding_1_rhyme">
      	<title>Nursery Rhyme printing</title>

      <statement>
	<p>
	  Modify the <c>NurseryRhyme</c> class to
	  <q>sing</q>
	  either
	  <q>Mary Had a Little Lamb</q>
	  or your favorite nursery rhyme instead of Old MacDonald had a farm.
	</p>
      </statement>
      <program label="jpdd_nursery_rhyme" interactive="activecode" language="java">
	<input>
	  public class NurseryRhyme
	  {
	  public static void main(String args[])   // Main method
	  {
          System.out.println("Old MacDonald had a farm");
          System.out.println("E I E I O.");
          System.out.println("And on his farm he had a duck.");
          System.out.println("E I E I O.");
          System.out.println("With a quack quack here.");
          System.out.println("And a quack quack there.");
          System.out.println("Here a quack, there a quack,");
          System.out.println("Everywhere a quack quack.");
          System.out.println("Old MacDonald had a farm");
          System.out.println("E I E I O.");
	  }  // End of main
	  }  // End of NurseryRhyme
	</input>
	<tests>
	  <![CDATA[
		   import static org.junit.Assert.*;
                   import org.junit.*;
                   import java.io.*;
                   import java.util.List;
                   import java.util.ArrayList;
                   import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
public RunestoneTests()
{
super("NurseryRhyme");
}
@Test
public void test1()
{
String target = "Old MacDonald had a farm";
boolean passed = checkCodeNotContains("line 1 or 9 of Old MD",target);
assertTrue(passed);
}
@Test
public void test2()
{
String target = "E I E I O.";
boolean passed = checkCodeNotContains("line 2,4,or 10 of Old MD",target);
assertTrue(passed);
}
@Test
public void test3()
{
String target = "And on his farm he had a duck.";
boolean passed = checkCodeNotContains("line 3 of Old MD",target);
assertTrue(passed);
}
@Test
public void test4()
{
String target = "With a quack quack here.";
boolean passed = checkCodeNotContains("line 5 of Old MD",target);
assertTrue(passed);
}
@Test
public void test5()
{
String target = "And a quack quack there.";
boolean passed = checkCodeNotContains("line 6 of Old MD",target);
assertTrue(passed);
}
@Test
public void test6()
{
String target = "Here a quack, there a quack,";
boolean passed = checkCodeNotContains("line 7 of Old MD",target);
assertTrue(passed);
}
@Test
public void test7()
{
String target = "Everywhere a quack quack.";
boolean passed = checkCodeNotContains("line 8 of Old MD",target);
assertTrue(passed);
}
}

	  ]]>
	</tests>
      </program>
      
    </exercise>
    <!-- Problem 20 -->
    <exercise label="jpdd_println_coding_2_paterns">
	<title>Printing patterns</title>
      <statement>
	<p>
	  Define a Java class,
	  called <c>Patterns</c>, modeled after <c>OldMacDonald</c>, that will print the following patterns of asterisks,
	  one after the other heading down the page:
	  <cd>
	    *****     *****   *****
	     ****     *   *   * * *
	      ***     *   *    * *
               **     *   *   * * *
                *     *****   *****
	  </cd>
	</p>
      </statement>
      <program label="jpdd_patterns" interactive="activecode" language="java">
	<input>


public class Patterns {

}





	</input>
	<tests>
	  <![CDATA[
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.reflect.*;

public class RunestoneTests extends CodeTestHelper
{
    
    public RunestoneTests()
    {
	super("Patterns");
    }

    protected String stackToString(Exception e) {
	StringWriter s = new StringWriter();
	PrintWriter p = new PrintWriter(s);
	e.printStackTrace(p);
	s.flush();
	return s.toString();
    }
    /*
     * Methods for getting / checking method details
     * ---------------------------------
     */
    protected boolean checkStaticMethod(Method m) {

        String header = m.toGenericString();
        String[] info = header.split(" ");

        if (!info[1].equals("static")) {
            // errorMessage = "Method " + m.getName() + " is not static";
            return false;
        }

        return true;
    }

    protected boolean checkReturnType(Method m, String rType) {
        String header = m.toGenericString();
        String[] info = header.split(" ");

        if (checkStaticMethod(m))
            return info[2].equals(rType);

        return info[1].equals(rType);
    }

protected Class<?>[] getArgumentTypes(Object[] args) {
        if (args == null)
            return null;

        Class<?>[] argTypes = new Class<?>[args.length];

        for (int i = 0; i < args.length; i++) {
            // System.out.println("Argument: " + args[i] + "\tType: ");

            if (args[i] instanceof Integer) {
                argTypes[i] = Integer.TYPE;
            } else if (args[i] instanceof Double) {
                argTypes[i] = Double.TYPE;
            } else if (args[i] instanceof Boolean) {
                argTypes[i] = Boolean.TYPE;
            } else if (args[i] instanceof String) {
                argTypes[i] = String.class;
            } else if (args[i].getClass().isArray()) {
                if (args[i].getClass().getComponentType().equals(int.class)) {
                    argTypes[i] = int[].class;
                } else if (args[i].getClass().getComponentType().equals(double.class)) {
                    argTypes[i] = double[].class;
                } else if (args[i].getClass().getComponentType().equals(boolean.class)) {
                    argTypes[i] = boolean[].class;
                } else if (args[i].getClass().getComponentType().equals(String.class)) {
                    argTypes[i] = String[].class;
                } else if (args[i].getClass().getComponentType().isArray()) {
                    if (args[i].getClass().getComponentType().equals(int[].class)) {
                        argTypes[i] = int[][].class;
                    } else if (args[i].getClass().getComponentType().equals(double[].class)) {
                        argTypes[i] = double[][].class;
                    } else if (args[i].getClass().getComponentType().equals(boolean[].class)) {
                        argTypes[i] = boolean[][].class;
                    } else if (args[i].getClass().getComponentType().equals(String[].class)) {
                        argTypes[i] = String[][].class;
                    } else {
                        argTypes[i] = Object[][].class;
                    }
                } else {
                    argTypes[i] = Object[].class;
                }
            } else {
                argTypes[i] = Object.class;
            }
        }

        return argTypes;
    }

 protected boolean checkParameters(Method m, Object[] arguments) {
        String extraClassName = "Patterns";
        String header = m.toGenericString().replace(extraClassName + ".", "");

        // ???: Is this still needed. As we discovered, it doesn't handle the
        // case where the main method has a throws clause. I *think* that maybe
        // with the other fix at line 321, this may not be needed anymore? I'm
        // not sure. -Peter
        if (header.equals("public static void main(java.lang.String[])"))
            return true;

        Class<?>[] params = m.getParameterTypes();

        if (arguments == null || params == null) {
            return true;
        }

        Class<?>[] argTypes = getArgumentTypes(arguments);

        // System.out.println("\n***************************\nHeader: " + header +
        // "\nClass: " + extraClassName + "\n");
        // System.out.println(m.getName());
        // System.out.println("Params: " + Arrays.toString(params) + "\nArgTypes: " +
        // Arrays.toString(argTypes));
        String errorMessage = "";
        if (params.length == arguments.length) {
            for (int i = 0; i < params.length; i++) {
                // System.out.println(params[i] + "\t" + argTypes[i]);
                if (params[i] != argTypes[i]) {

                    errorMessage = "Parameter and Argument types do not match";
                    return false;
                }
            }
        } else {
            errorMessage = "Parameter and Argument lengths do not match";
            return false;
        }

        return true;
    }

    protected String getStaticMethodOutputFull(String className,String methodName, Object[] arguments)// throws IOException
    {
        String errorMessage = "";
	Method m = null;
	try {
	    Class<?> locC = Class.forName(className);
	    methods = locC.getDeclaredMethods();
	    
	    for (Method n : methods) {
		if (n.getName().equals(methodName)) {
		    if (checkStaticMethod(n) && checkReturnType(n,
								"void")) {
			m = n;
			break;
		    }
		}
	    }
	    if (m == null) {
		return "No method called " + methodName + " in class " + className;
	    }


	    setupStreams();

	    if (arguments != null)
		if (checkParameters(m, arguments) || m.getName().equals("main"))
		    m.invoke(null, arguments);
		else
		    errorMessage = "Arguments incorrect (3)";
	    else
		m.invoke(null);

	    String output = outContent.toString();
	    cleanUpStreams();
	    return output;
	} catch (Exception e) {
	    if (errorMessage.equals("")) {
		errorMessage = stackToString(e);
		// errorMessage += "\nMethod " + m.getName() + " could not be invoked (3)";

	    }
	}

	if (errorMessage.equals("")) {
	    // errorMessage = stackToString(e);
	    errorMessage = "Method " + methodName + " with parameters " + Arrays.toString(arguments)
		+ " does not exist";

	    }

	   cleanUpStreams();
	   return errorMessage;
        }




 protected String expectedShapes =
	"*****\n" +
	" ****\n" +
	"  ***\n" +
	"   **\n" + 
	"    *\n" +
	"\n" +
	"*****\n" +
	"*   *\n" +
	"*   *\n" +
	"*   *\n" +	       
	"*****\n" +
	"\n" +
	"*****\n" +
	"* * *\n" +
	" * * \n" +
	"* * *\n" +
	"*****\n";
    

    @Test
    public void testShapes()
    {
      
	Scanner expected = new Scanner(expectedShapes);
	Scanner actual = new
	    Scanner(getStaticMethodOutputFull("Patterns","main",
					      new Object[][] { new String[0] }));
	boolean passes = true;
	int line = 1;
	while (expected.hasNextLine() &&
	       actual.hasNextLine()) {
	    String expect = expected.nextLine();
	    String act = actual.nextLine();
	    passes = getResults(expect,act,"line " + line + " matches",expect.equals(act)) && passes;
	    ++line;
	}
	while (expected.hasNextLine()) {
	    String expect = expected.nextLine();
	    String act = "";
	    passes = getResults(expect,act,"line " + line + " missing",expect.equals(act)) && passes;
	    ++line;
	}
	while (actual.hasNextLine()) {
	    String expect = "";
	    String act = actual.nextLine();
	    passes = getResults(expect,act,"line " + line + " extra",expect.equals(act)) && passes;
	    ++line;
	}


	assertTrue(passes);
    }
}
	  ]]>
	</tests>
      </program>
    </exercise>
    <!-- Problem 21 -->
    <exercise label="jpdd_println_coding_3_initials">
	<title>Printing Initials</title>
      <statement>
	<p>
	  Write a Java class that prints your initials as block letters,
	  as shown here:
	</p>
	<cd>
	  ****** *     *
	  *    * **   **
	  *    * * * * *
	  ****** * * * *
	  **     *  *  *
	  * *    *     *
	  *  *   *     *
	  *   *  *     *
	</cd>
      </statement>
      <program label="jpdd_initials" interactive="activecode" language="java">
	<input>
public class Initials {
    public static void main(String[] args) {
        // TODO: add code to print your initials as block letters.

    }
}
	</input>
      </program>
    </exercise>
    <!-- Problem 22 -->
    <exercise label="jpdd_challenge_1_temperature">
	<title>Temperature class</title>
      <statement>
	<p><term>Challenge:</term> Define a class that represents a <c>Temperature</c> object.
	It should store the current temperature in an instance variable of type <c>double</c>, 
	and it should have a <c>public</c> constructor <c>Temperature(double
	t)</c> that initializes the
	instance variable, and one <c>public</c> method, <c>getTemp()</c>, which <c>return</c>s the value of the instance variable.
	Use the <c>Riddle</c> class as a model.
	</p>
      </statement>
      <program label="jpdd_temperature" interactive="activecode" language="java">
	<input>
	  public class Temperature {

	  }
	</input>
	<tests>
          <![CDATA[
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.reflect.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests() {
	super("Temperature");
    }


    private Object getTestInstance(Object[] defaultTestValues) {
        String errorMessage = "";
        try {
	    Class<?> c = Class.forName("Temperature");
            Constructor[] ctors = c.getDeclaredConstructors();
            Constructor ctor = ctors[0];

	    return ctor.newInstance(defaultTestValues);

        } catch (Exception e) {
            errorMessage = "Couldn't call constructor";
        }

        return null;
    }
    
    @Test
    public void test1()
    {
	String target = "1 Private";
	String actual = testPrivateInstanceVariables();
	expect(target,actual,"only 1 private field");
	
    }
    @Test
    public void test1b()
    {
	boolean found = true;
	String[] types = {"double"};
	String fieldTypes =
	    testInstanceVariableTypes(types);
	if (fieldTypes.trim().equals("") || fieldTypes.equals("fail")) {
	    found = false;
	} else {
	    String[] typeNames = fieldTypes.trim().split(" ");
	    if(typeNames.length != 1 || !typeNames[0].equals("double")) {
		found = false;
	    }
	    if(types[0] != null) {
		found = false;
	    }

	}

	expect(true,found,"has exactly 1 double field");
    }

    @Test
    public void test2()
    {
	    double testValue = 5.0;
	    double target = testValue;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getTemp");
	    expect(target,(Double)m.invoke(t),
		   "constructor and getter work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),"exception",
		   "constructor and/or getter don't work");
	}
    }
    @Test
    public void test2b()
    {
	    double testValue = 100.0;
	    double target = testValue;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getTemp");
	    expect(target,(Double)m.invoke(t),
		   "constructor and getter work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),"exception",
		   "constructor and/or getter don't work");
	}
    }


    @Test
    public void test3()
    {
	    double testValue = -60.0;
	    double target = testValue;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("getTemp");
	    expect(target,(Double)m.invoke(t),
		   "constructor and getter work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),"exception",
		   "constructor and/or getter don't work");
	}
    }
}

          ]]>
	</tests>
      </program>
    </exercise>
  
    <!-- Problem 23 -->
  <exercise  label="jpdd_challenge_2_tax_whiz">
	<title>Tax Whiz Challenge</title>
    <statement>
      <p><term>Challenge:</term> Define a class named <c>TaxWhiz</c> that computes the sales tax for a purchase.
      It should store the current tax rate as an instance variable.
      Following the model of the <c>Riddle</c> class,
      you can initialize the rate using a <c>TaxWhiz()</c> constructor.
      This class should have one <c>public</c> method, <c>calcTax(double purchase)</c>, 
      which will <c>return</c> a <c>double</c>, whose value is <c>purchases</c> times the tax rate.
      For example, if the tax rate is 4 percent, 0.04, and the purchase is $100,
      then <c>calcTax()</c> should return 4.0.
      </p>
    </statement>
  </exercise>
    
    <!-- Problem 24 -->
  <exercise label="jpdd_variables_1">
    	<title>Variable Tracing</title>
    <statement>
      <p>
	What is stored in the variables <c>num1</c> and <c>num2</c> after the following statements are executed?
	<cd>
int num1 = 5;
int num2 = 8;
num1 = num1 + num2;
num2 = num1 + num2;
	</cd>
      </p>
      <p>Enter the final value for <c>num1</c>: <var width="5"/>
      </p>
      <p>Enter the final value for <c>num2</c>: <var width="5"/>
      </p>
    </statement>
<setup>
            <var>
            <condition string="13">
              <feedback>
		<p>num1,Correct.</p>
              </feedback>
            </condition>
	    <condition string="5">
              <feedback>
		<p>num1, try again. Remember that variables can change
		from assignment.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>num1,Try again, trace the value of each variable one
		line at a time from top to bottom. Remember that the
		right side of assignment is evaluated before it is
		assigned to the variable on the left side.</p></feedback>
            </condition>
     </var>
     <var>
            <condition string="21">
              <feedback>
		<p>num2,Correct.</p>
              </feedback>
            </condition>
	    <condition string="8">
              <feedback>
		<p>num2, try again. Remember that variables can change
		from assignment.</p>
              </feedback>
            </condition>
	    <condition string="13">
              <feedback>
		<p>num2, try again. Remember that variables can change
		from assignment and the latest value of
		a variable is what is used when evaluating expressions.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>num2, Try again, trace the value of each variable one
		line at a time from top to bottom. Remember that the
		right side of assignment is evaluated before it is
		assigned to the variable on the left side.</p>
              </feedback>
            </condition>
     </var>
         
	  
    </setup>
    </exercise>
    <!-- Problem 25 -->
    <exercise label="jpdd_variables_2">
	<title>Variable initialization</title>
  <statement>
      <p>
	Write a single of statement that will declare a 
	variable of type <c>int</c> called <c>num</c> and store in it the difference between 61 and 51. 
      </p>
      <p>
	<var width="30"/>
      </p>
      
  </statement>
<setup>
          <var>
            <condition string=" *int +num += +61 *- *51 *;">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string=" *int +num += +61 *- *51 *">
              <feedback>
		<p>Try again. missing semicolon..</p>
              </feedback>
            </condition>
	    <condition string=" *int +.+ += +61 *- *51 *;">
              <feedback>
		<p>Try again. the name of the variable is wrong or in
		the wong place.</p>
              </feedback>
            </condition>
	    <condition string=" *.+ +num += +61 *- *51 *;">
              <feedback>
		<p>Try again. the type of the variable is wrong or in
		the wrong place.</p>
              </feedback>
            </condition>
	    <condition string=".*int +num += +61 *- *51 *;.*">
              <feedback>
		<p>Try again. There is extra text either before or
		after your correct statement</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string=" *int +num += +61 *- *51 *;">
              <feedback>
		<p>Try again, case of every character matters.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Pay careful attention to what the question is asking.</p>
              </feedback>
            </condition>
          </var>
	</setup>	
    </exercise>
    <!-- Problem 26 -->
    <exercise label="jpdd_uml_diagram_1" attachment="yes">
      	<title>UML Riddle</title>

      <statement>
      <p>
	Modify the UML diagram of the <c>Riddle</c> class to 
	contain a method named <c>getRiddle()</c> that would return both the riddle's question and answer.
      </p>
      </statement>
      <response />
    </exercise>
    <!-- Problem 27 -->
    <exercise label="jpdd_uml_diagram_2" attachment="yes">
      	<title>UML Circle</title>

    <statement>
      <p>
	Draw a UML class diagram representing the following class: The name of the class is <c>Circle</c>. It has one attribute,
	a <c>radius</c> that is represented by a <c>double</c> value.
	It has one operation, <c>calculateArea()</c>, which 
	returns a <c>double</c>. Its attributes should be designated as private and its method as public.
      </p>
    </statement>
          <response />

    </exercise>
    <!-- Problem 28 -->
    <exercise label="jpdd_uml_diagram_3" attachment="yes">
      	<title>UML Triangle</title>

    <statement>
    
      <p>
	To represent a triangle we need attributes for each of its three sides and operations to create a triangle,
	calculate its area, and calculate its perimeter.
	Draw a UML diagram to represent this triangle.
      </p>
    </statement>
          <response />

    </exercise>
    <!-- Problem 29 -->
    <exercise label="jpdd_uml_diagram_4">
    	<title>UML to Java</title>
    <statement>

      <p>
	Try to give the Java class definition for the class described 
	in UML diagram shown here.
	<image width="50%" source="chptr01/umlexerc.png"/>
      </p>
    </statement>
    <program label="jpdd_person_class" interactive="activecode" language="java">
      <input>

	  public class Person {



	  }



      </input>
	<tests>
          <![CDATA[
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.reflect.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests() {
	super("Person");
    }


    private Object getTestInstance(Object[] defaultTestValues) {
        String errorMessage = "";
        try {
	    Class<?> c = Class.forName("Person");
            Constructor[] ctors = c.getDeclaredConstructors();
            Constructor ctor = ctors[0];

	    return ctor.newInstance((Object[])null);

} catch (Exception e) {
try {
Class<?> c = Class.forName("Person");
            Constructor[] ctors = c.getDeclaredConstructors();
            Constructor ctor = ctors[0];

return ctor.newInstance(defaultTestValues);
}catch (Exception e2) {
errorMessage = "Couldn't call constructor";
}
        }

        return null;
    }
    
    @Test
    public void test1()
    {
	String target = "2 Private";
	String actual = testPrivateInstanceVariables();
	expect(target,actual,"exactly 2 private fields");
	
    }
    @Test
    public void test1b()
    {
	boolean found = true;
	String[] types = {"String","String"};
	String fieldTypes =
	    testInstanceVariableTypes(types);
	if (fieldTypes.trim().equals("") || fieldTypes.equals("fail")) {
	    found = false;
	} else {
	    String[] typeNames = fieldTypes.trim().split(" ");
	    if(typeNames.length != 2 || !typeNames[0].equals("String")
	    || !typeNames[1].equals("String") ) {
		found = false;
	    }
	    if(types[0] != null || types[1] != null) {
		found = false;
	    }

	}

	expect(true,found,"has exactly 2 String fields");
    }

    @Test
    public void test2()
    {
    String name = "Jenny";
    String phone = "867-5309";
	    String target = name;
	try {
	    Object[] testValues = {name,phone};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("printName");
	    setupStreams();
	    m.invoke(t);
	    cleanUpStreams();
            String result = outContent.toString().trim();
	    if (result.equals("null")) {
	      target = "null";
            }
	    expect(target,result,
		   "constructor and printName work for " + name);
	} catch(Exception e) {
	    expect(String.valueOf(target),"exception",
		   "constructor and/or printName don't work");
	}
    }
    @Test
    public void test2b()
    {
	    String name = "Jenny";
    String phone = "867-5309";
	    String target = phone;
	try {
	    Object[] testValues = {name,phone};
	    Object t = getTestInstance(testValues);
	    Method m = t.getClass().getMethod("printPhone");
	    setupStreams();
	    m.invoke(t);
	    cleanUpStreams();
            String result = outContent.toString().trim();
	    if (result.equals("null")) {
	      target = "null";
            }
	    expect(target,result,
		   "constructor and printPhone work for " + phone);
	} catch(Exception e) {
	    expect(String.valueOf(target),"exception",
		   "constructor and/or printPhone don't work");
	}
    }


   
}

          ]]>
	</tests>
      

    </program>
    </exercise>
  </exercises>
</section>
