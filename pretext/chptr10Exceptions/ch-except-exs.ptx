<section xml:id="ch-except-exs">
    <title>Chapter Exercises</title>

  <exercises>
  <title>Exceptions Exercises</title>

   <exercise label="jexcex_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  Exception concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>throwing an exception</em></premise>
          <response>when an exceptional condition is detected an <c>Exception</c> object is created and <c>throw</c> statement is used to pass the <c>Exception</c> to a catch block or up the call stack </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>catching an exception</em></premise>
          <response>handling an exception that has been thrown to a try block</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>try block</em></premise>
          <response>a set of statements that includes at least one statement that can throw an exception</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>catch block</em> </premise>
          <response>a set of statements meant to catch the exception(s) specified in the catch header that are called immediately following the statement that threw an exception in the try block</response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>finally block</em> </premise>
          <response>a set of statements that are executed after the try block or after the catch block if an exception is thrown</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>dynamic scope</em></premise>
          <response>the scope that changes at runtime. In java this happens using try/catch blocks with exception handling.</response>
	</match>
	<match>
	  <order>8</order>
          <premise><c>static scope</c></premise>
          <response>the scope defined by source code</response>
	</match>
	<match>
	  <order>9</order>
          <premise> <c>dialog box</c> </premise>
          <response>a window that can only be created from a top-level window.</response>
	</match>
	<match>
	  <order>10</order>
          <premise> <c>top-level window</c> </premise>
          <response>a window that can be created on its own.</response>
	</match>
	<match>
	  <order>11</order>
          <premise> <c>checked exception</c> </premise>
          <response>an exception that needs to either be caught in a try/catch block, or be in a method that throws the exception.</response>
	</match>
	<match>
	  <order>12</order>
          <premise> <em>unchecked exception</em> </premise>
          <response>an exception that doesn't need to be caught.</response>
	</match>

<match>
	  <order>13</order>
          <premise> <em>method stack</em> </premise>
          <response>A data structure that holds the current history of method calls.</response>
	</match>
	<match>
	  <order>14</order>
          <premise> <em>method call </em> </premise>
          <response>a statement that invokes a particular method.</response>
	</match>
	
      </matches>
      </exercise>

    <exercisegroup>
    <title>Fill in the Blanks</title>
     
    <introduction>
      <p>
        Fill in the blanks.
        </p>
	</introduction>
                     <exercise label="jexcex_fill_in_1">       
<title></title>       
 <statement>

            <p>
              <var width="15"/> an exception is Java's way of signaling that some kind of abnormal situation has occurred.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="throwing">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_2">       
<title></title>       
 <statement>

            <p>
              The only place that a checked exception can be thrown in a Java program is within a <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="try block">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_3">       
<title></title>       
 <statement>

            <p>
              The block of statements placed within a catch block is generally known as an <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="exception handler">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_4">       
<title></title>       
 <statement>

            <p>
              To determine a statement's <var width="15"/> scope,
              you have to trace the program's execution.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="dynamic">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_5">       
<title></title>       
 <statement>

            <p>
              To determine a statement's <var width="15"/> scope,
              you can just read its definition.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="static">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_6">       
<title></title>       
 <statement>

            <p>
              When a method is called,
              a representation of the method call is placed on the <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="method stack">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_7">       
<title></title>       
 <statement>

            <p>
              The root of Java's exception hierarchy is the <var width="15"/> class.
            </p>
          </statement>
      <setup>
          <var >
            <condition string="Exception">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_8">       
<title></title>       
 <statement>

            <p>
              A <var width="15"/> exception must be either caught or declared within the method in which it might be thrown. [4]
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="checked">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jexcex_fill_in_9">       
<title></title>       
 <statement>

            <p>
              An <var width="15"/> exception can be left up to Java to handle.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="unchecked">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
        
    </exercisegroup>
               <exercise label="jexcex_handling_exceptions">       
<title>Handling Exceptions</title>       
 <statement>

      <p>
        Compare and contrast the four different ways of handling exceptions within a program.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_string_too_long_exception">       
<title>String Too Long Exception</title>       
 <statement>

      <p>
        Suppose you have a program that asks the user to input a string of no more than five letters.
        Describe the steps you'd need to take in order to design a <c>StringTooLongException</c> to handle cases where the user types in too many characters.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_exceptions_vs_normal">       
<title>Exceptions vs. Normal Processing</title>       
 <statement>

      <p>
        Exceptions require more computational overhead than normal processing.
        Explain.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_tracing_call_stack_1"  attachment="yes">       
<title>Call Stack</title>       
 <statement>

      <p>
        Suppose the following <c>ExerciseExample</c> program is currently executing the if statement in <c>method2()</c>:
 <program language="java"><input>
public class ExerciseExample {
  public void method1(int M) {
    try {
      System.out.println("Entering try block");
      method2( M );
      System.out.println("Exiting try block");
    } catch (Exception e) {
      System.out.println("ERROR: " + e.getMessage());
    }
  } // method1()
  public void method2(int M) {
    if (M > 100)
      throw new ArithmeticException(M + " is too large");
  }
  public static void main(String argv[]) {
    ExerciseExample ex = new ExerciseExample();
    ex.method1(500);
  }
} // ExerciseExample
 </input></program>Draw a picture of the method call stack that represents this situation.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_call_stack_2">       
<title>Call Stack Again</title>       
 <statement>

      <p>
        Repeat the previous exercise for the situation where the program is currently executing the second <c>println()</c> statement in <c>method1()</c>.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_static_scoping"  attachment="yes">       
<title>Static Scoping</title>       
 <statement>

      <p>
        Draw a hierarchy chart that represents the static scoping relationships among the elements of the <c>ExerciseExample</c> program.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_tracing_output_1">       
<title>Tracing Output</title>       
 <statement>

      <p>
        What would be printed by the <c>ExerciseExample</c> program when it is run?
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_tracing_output_2">       
<title>Tracing Output 2</title>       
 <statement>

      <p>
        What would be printed by the <c>ExerciseExample</c> program,
        if the statement in its main method were changed to
<c>ex.method1(5)</c>?
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_tracing_exception">       
<title>Tracing Exception</title>       
 <statement>

      <p>
        Consider again the <c>ExerciseExample</c> program.
        If the exception thrown were <c>Exception</c> rather than
<c>ArithmeticException</c>, explain why we would get the following error message: <c>java.lang.Exception must be caught, or it must be
declared</c><ellipsis /> .
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_code_try_catch">       
<title>Write Try Catch</title>       
 <statement>

      <p>
        Write a <c>try/catch</c> block that throws an
<c>Exception</c> if the value of variable <c>X</c> is less than zero.
        The exception should be an instance of <c>Exception</c> and,
        when it is caught,
        the message returned by <c>getMessage()</c> should be
        <q>ERROR: Negative value in X coordinate.</q>
      </p>
    </statement>
      <program label="jexcex_try_catch_prg" interactive="activecode" language="java">
<preamble>
      import java.util.Scanner;
	    public class Program {	
          private static Scanner keyboard = 
              new Scanner(System.in);	
	        public static void main(String args[]) {
              int x = keyboard.nextInt();
	            // write try/catch block here.
              </preamble><code>

              </code>
              <postamble>
		    
		}
	    }
</postamble>
<stdin>4</stdin>
</program>    

    </exercise>
               <exercise label="jexcex_trace_int_field">       
<title>Trace IntField</title>       
 <statement>

      <p>
        Look at the <c>IntFieldTester</c> program (<xref ref="fig-intbound"></xref>) and 
        the <c>IntField</c> class definition (<xref ref="fig-intfield2"></xref>).
        Suppose the user inputs a value that's greater than 100.
        Show what the method call stack would look like when the <c>IntField.getInt()</c> method is executing the
<c>num > bound</c> expression.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_trace_int_field_2">       
<title>Trace IntField 2</title>       
 <statement>

      <p>
        As a continuation of the previous exercise,
        show what the program's output would be if the user input a value greater than 100.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_trace_int_field_3">       
<title>Trace IntField 3</title>       
 <statement>

      <p>
        As a continuation of the previous exercise,
        modify the
<c>IntOutOfRangeException</c> handler so that it prints the message call stack.
        Then show what it would print.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_code_invalid_password_exception">       
<title>Invalid Password Exception</title>       
 <statement>

      <p>
        Define a subclass of <c>RuntimeException</c> named
<c>InvalidPasswordException</c>, which contains two constructors.
        The first constructor takes no parameters and an exception thrown with this constructor should return
        <q>ERROR: invalid password</q>
        when its
<c>getMessage()</c> is invoked.
        The second constructor takes a single
<c>String</c> parameter.
        Exceptions thrown with this constructor should return the constructor's argument when <c>getMessage()</c> is invoked.
      </p>
    </statement>
      <program label="jexcex_invalid_password_prg" interactive="activecode" language="java">
	<preamble>
import java.util.Scanner;
public class InvalidPasswordException extends RuntimeException {		
    private static Scanner keyboard = 
              new Scanner(System.in);
    public static void main(String args[]) {
		    String attempt = keyboard.nextLine();
        if(validPassword(attempt)) {
          System.out.println("You're in!");
        } else {
          System.out.println("Go away!");
        }
    }
    public static boolean validPassword(String guess) {
      if(guess.equals("When you know you know.")){
        return true;
      } else {
        // change the constructor to add your own message
        </preamble>
        <code>
        throw new InvalidPasswordException();
      }
    }

    // Add default constructor here

    // Add second constructor here

    </code>
    <postamble>

}
</postamble>
<stdin>The world's longest password attempt is longer than this.</stdin>
</program>    

	       </exercise>

               <exercise label="jexcex_extend_int_field">       
<title>Extend IntField</title>       
 <statement>

      <p>
        Extend the <c>IntField</c> class so that it will constrain the integer <c>JTextField</c> to an <c>int</c> between both a lower and upper bound.
        In other words,
        it should throw an exception if the user types in a value lower than the lower bound or greater than the upper bound.
      </p>
      <p> You'll notice in <c>IntField</c>, <xref ref="fig-intfield2" />, that the 
      upper bound is private. That means that you'll need to use the parent <c>getInt()</c> method
      to check the upper bound, and you'll only need to check the lower bound yourself. 
      The <c>size</c> parameter of the <c>IntField</c> constructors specifies the number of characters
      that the field should show, and it has nothing to do with the value of the number in the field.
      </p>
 </statement>
<datafile xml:id="intoutofrangeexception-src" label="intoutofrangeexception-src" filename="IntOutOfRangeException.java" editable="no" hide="yes">
<pre>
<![CDATA[
public class IntOutOfRangeException extends Exception 
    {
      public IntOutOfRangeException (int Bound) 
      {
        super("The input value exceeds the bound " + Bound);
      }
      
      public static void main(String[] args) throws IntOutOfRangeException
      {
          int bound = 10;
          int num = 11;
          if (num > bound)
              throw new IntOutOfRangeException(bound);
          else
              System.out.println(num + " is in range!");
          
      }
  }
]]>
</pre>
</datafile>
 <datafile xml:id="intfield-src" label="intfield-src" filename="IntField.java" editable="no" hide="yes">
<pre>
<![CDATA[

import javax.swing.*;
public class IntField extends JTextField {
    private int bound = Integer.MAX_VALUE;
    public IntField (int size) {
        super(size);
    }
    public IntField(int size, int max) {
        super(size);
        bound = max;
    }
    public int getInt() throws NumberFormatException,
                               IntOutOfRangeException {
        int num = Integer.parseInt(getText());
        if (num > bound)
            throw new IntOutOfRangeException(bound);
        return num;
    } // getInt()
} // IntField
]]>
</pre>
</datafile>
      <program label="jexcex_min_max_int_field_prg"
	       interactive="activecode" language="java"  
         add-files="intoutofrangeexception-src,intfield-src">
<preamble>
import java.util.Scanner;


 public class MinMaxIntField extends IntField {
 		
    private static Scanner keyboard = 
              new Scanner(System.in);
    public static void main(String args[]) {
		    String fieldEntry = keyboard.nextLine();
        if(checkField(fieldEntry)) {
          System.out.println("In Range");
        } else {
          System.out.println("Maybe next time...");
        }
    }
    </preamble>
    <code>
    public static boolean checkField(String field) {
      // create a MinMaxIntField

      // call setText on the MinMaxIntField using the field parameter

      // call getInt() to make sure that the field paramater is valid.

      // return true when there is not an exception.

    }
    // add the single field you need for MinMaxIntField here

    // write the constructor for MinMaxIntField here

    // write the overloaded getInt() method here

   </code>
   <postamble>
}
</postamble>
<stdin>-100000</stdin>
</program>    

    </exercise>
               <exercise label="jexcex_null_pointer_q">       
<title>Null In Sort</title>       
 <statement>

      <p>
        Design Issue: One of the preconditions for the <c>InsertionSort()</c> method (in Ch. 9) is that its array parameter not be null.
        Of course, this precondition would fail if the array were passed a null array reference.
        In that case, Java would throw a <c>NullPointerException</c> and terminate the program.
        Is this an appropriate way to handle that exception?
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_code_error_dialog">       
<title>Error Dialog</title>       
 <statement>

      <p>
        With respect to the previous exercise,
        suppose you decide that it is more appropriate to handle the
<c>NullPointerException</c> by presenting an error dialog.
        Modify the method to accommodate this behavior.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jexcex_sequential_search_design">       
<title>Sequential Search Design</title>       
 <statement>

      <p>
        Design Issue: Another possible way to design the
<c>sequentialSearch()</c> method (in Ch. 9) would be to have it throw an exception when its key is not found in the array.
        Is this a good design?
        Explain.
      </p>
    </statement>
      <response />
    </exercise>
  </exercises>
</section>
